from openff.toolkit import Topology
from openff.toolkit.utils import get_data_file_path

def successfully_loaded(top):
    match_info = [atom.metadata["match_info"] for atom in top.atoms]
    return all([bool(match) for match in match_info])

# #____________SIMPLE PROTEIN TESTS (should already be implemented)______________
# top = Topology.from_pdb(get_data_file_path("proteins/TwoMol_SER_CYS.pdb"))
# assert successfully_loaded(top)

# top = Topology.from_pdb(get_data_file_path("proteins/T4-protein.pdb"))
# assert successfully_loaded(top)
# # #____________________SIMPLE POLYMERS (custom substructures)____________________
# rubber_substructs = {
#                         "naturalrubber": "[#6&D4&+0:16](-[#6&D3&+0:17](=[#6&D3&+0:18](-[#6&D4&+0:19](-[#1&D1&+0:20])(-[#1&D1&+0:21])-[*:22])-[#6&D4&+0:23](-[#1&D1&+0:24])(-[#1&D1&+0:25])-[#1&D1&+0:26])-[#1&D1&+0:27])(-[#1&D1&+0:28])(-[#1&D1&+0:29])-[*:30]",
#                         "naturalrubber_TERM1": "[#6&D4&+0:16](-[#6&D3&+0:17](=[#6&D3&+0:18](-[#6&D4&+0:19](-[#1&D1&+0:20])(-[#1&D1&+0:21])-[#1&D1&+0:22])-[#6&D4&+0:23](-[#1&D1&+0:24])(-[#1&D1&+0:25])-[#1&D1&+0:26])-[#1&D1&+0:27])(-[#1&D1&+0:28])(-[#1&D1&+0:29])-[*:30]",
#                         "naturalrubber_TERM2": "[#6&D4&+0:16](-[#6&D3&+0:17](=[#6&D3&+0:18](-[#6&D4&+0:19](-[#1&D1&+0:20])(-[#1&D1&+0:21])-[*:22])-[#6&D4&+0:23](-[#1&D1&+0:24])(-[#1&D1&+0:25])-[#1&D1&+0:26])-[#1&D1&+0:27])(-[#1&D1&+0:28])(-[#1&D1&+0:29])-[#1&D1&+0:30]"
#                     }
# top = Topology.from_pdb("naturalrubber.pdb", _custom_substructures=rubber_substructs)
# assert successfully_loaded(top)

# PE_substructs = {
#                     "PE": "[#6&D4&+0:9](-[#1&D1&+0:10])(-[#1&D1&+0:11])(-[#6&D4&+0:12](-[#1&D1&+0:13])(-[#1&D1&+0:14])-[*:15])-[*:16]",
#                     "PE_TERM1": "[#6&D4&+0:9](-[#1&D1&+0:10])(-[#1&D1&+0:11])(-[#6&D4&+0:12](-[#1&D1&+0:13])(-[#1&D1&+0:14])-[#1&D1&+0:15])-[*:16]"
#                 }
# top = Topology.from_pdb("polyethylene.pdb", _custom_substructures=PE_substructs)
# assert successfully_loaded(top)

# pnipam_substructs = {
#                         "pnipam": "[#6&D4&+0:22](-[#1&D1&+0:23])(-[#1&D1&+0:24])(-[#6&D4&+0:25](-[#1&D1&+0:26])(-[#6&D3&+0:27](=[#8&D1&+0:28])-[#7&D3&+0:29](-[#1&D1&+0:30])-[#6&D4&+0:31](-[#1&D1&+0:32])(-[#6&D4&+0:33](-[#1&D1&+0:34])(-[#1&D1&+0:35])-[#1&D1&+0:36])-[#6&D4&+0:37](-[#1&D1&+0:38])(-[#1&D1&+0:39])-[#1&D1&+0:40])-[*:41])-[*:42]",
#                         "pnipam_TERM2": "[#6&D4&+0:22](-[#1&D1&+0:23])(-[#1&D1&+0:24])(-[#6&D4&+0:25](-[#1&D1&+0:26])(-[#6&D3&+0:27](=[#8&D1&+0:28])-[#7&D3&+0:29](-[#1&D1&+0:30])-[#6&D4&+0:31](-[#1&D1&+0:32])(-[#6&D4&+0:33](-[#1&D1&+0:34])(-[#1&D1&+0:35])-[#1&D1&+0:36])-[#6&D4&+0:37](-[#1&D1&+0:38])(-[#1&D1&+0:39])-[#1&D1&+0:40])-[#1&D1&+0:41])-[*:42]",
#                         "pnipam_TERM3": "[#6&D4&+0:22](-[#1&D1&+0:23])(-[#1&D1&+0:24])(-[#6&D4&+0:25](-[#1&D1&+0:26])(-[#6&D3&+0:27](=[#8&D1&+0:28])-[#7&D3&+0:29](-[#1&D1&+0:30])-[#6&D4&+0:31](-[#1&D1&+0:32])(-[#6&D4&+0:33](-[#1&D1&+0:34])(-[#1&D1&+0:35])-[#1&D1&+0:36])-[#6&D4&+0:37](-[#1&D1&+0:38])(-[#1&D1&+0:39])-[#1&D1&+0:40])-[*:41])-[#1&D1&+0:42]"
#                     }
# top = Topology.from_pdb("pnipam_modified.pdb", _custom_substructures=pnipam_substructs)
# assert successfully_loaded(top)

#______________FUNCTIONALIZED PROTEIN (existing + custom substructures)________
# sixcww_substructs = {
#                       "211": "[#8&D2&+0:1](-[#6&D4&+0:2](-[#6&D4&+0:3](-[#7&D3&+0:4](-[#6&D4&+0:5](-[#6&D4&+0:6](-[#8&D2&+0:7]-[#1&D1&+0:8])(-[#1&D1&+0:9])-[#1&D1&+0:10])(-[#1&D1&+0:11])-[#1&D1&+0:12])-[#6&D4&+0:13](-[#6&D4&+0:14](-[#8&D2&+0:15]-[#1&D1&+0:16])(-[#1&D1&+0:17])-[#1&D1&+0:18])(-[#1&D1&+0:19])-[#1&D1&+0:20])(-[#1&D1&+0:21])-[#1&D1&+0:22])(-[#1&D1&+0:23])-[#1&D1&+0:24])-[#1&D1&+0:25]",
#                       "HEM": "[#6&D4&+0:1]12(-[#6&D4&+0:2](-[#6&D4&+0:3]3(-[#6&D4&+0:4](-[#6&D4&+0:5](-[#6&D4&+0:6]4(-[#6&D4&+0:7](-[#6&D4&+0:8]5(-[#6&D4&+0:9](-[#6&D4&+0:10](-[#6&D4&+0:11]6(-[#6&D4&+0:12](-[#6&D4&+0:13]7(-[#6&D4&+0:14](-[#6&D4&+0:15](-[#6&D4&+0:16]8(-[#6&D4&+0:17](-[#6&D4&+0:18](-[#6&D4&+0:19](-[#6&D4&+0:20]-1(-[#6&D4&+0:21](-[#6&D4&+0:22](-[#6&D4&+0:23](-[#8&D2&+0:24]-[#1&D1&+0:25])(-[#8&D2&+0:26]-[#1&D1&+0:27])-[#1&D1&+0:28])(-[#1&D1&+0:29])-[#1&D1&+0:30])(-[#1&D1&+0:31])-[#1&D1&+0:32])-[#1&D1&+0:33])(-[#6&D4&+0:34](-[#1&D1&+0:35])(-[#1&D1&+0:36])-[#1&D1&+0:37])-[#1&D1&+0:38])(-[#7&D3&+0:39]-2-[#26&D6&+0:40](-[#8&D1&+0:41])(-[*:42])(-[#7&D3&+0:43]-7-8)(-[#7&D3&+0:44]-5-6)-[#7&D3&+0:45]-3-4)-[#1&D1&+0:46])(-[#1&D1&+0:47])-[#1&D1&+0:48])-[#1&D1&+0:49])(-[#6&D4&+0:50](-[#1&D1&+0:51])(-[#1&D1&+0:52])-[#1&D1&+0:53])-[#1&D1&+0:54])(-[#6&D4&+0:55](-[#6&D4&+0:56](-[#1&D1&+0:57])(-[#1&D1&+0:58])-[#1&D1&+0:59])(-[#1&D1&+0:60])-[#1&D1&+0:61])-[#1&D1&+0:62])-[#1&D1&+0:63])(-[#1&D1&+0:64])-[#1&D1&+0:65])-[#1&D1&+0:66])(-[#6&D4&+0:67](-[#1&D1&+0:68])(-[#1&D1&+0:69])-[#1&D1&+0:70])-[#1&D1&+0:71])(-[#6&D4&+0:72](-[#6&D4&+0:73](-[#1&D1&+0:74])(-[#1&D1&+0:75])-[#1&D1&+0:76])(-[#1&D1&+0:77])-[#1&D1&+0:78])-[#1&D1&+0:79])-[#1&D1&+0:80])(-[#1&D1&+0:81])-[#1&D1&+0:82])-[#1&D1&+0:83])(-[#6&D4&+0:84](-[#1&D1&+0:85])(-[#1&D1&+0:86])-[#1&D1&+0:87])-[#1&D1&+0:88])(-[#6&D4&+0:89](-[#6&D4&+0:90](-[#6&D4&+0:91](-[#8&D2&+0:92]-[#1&D1&+0:93])(-[#8&D2&+0:94]-[#1&D1&+0:95])-[#1&D1&+0:96])(-[#1&D1&+0:97])-[#1&D1&+0:98])(-[#1&D1&+0:99])-[#1&D1&+0:100])-[#1&D1&+0:101])-[#1&D1&+0:102])(-[#1&D1&+0:103])-[#1&D1&+0:104])-[#1&D1&+0:105]",
#                       "ARG_Special": "[#7&D3&+0:27](-[#1&D1&+0:28])(-[#6@@&D4&+0:29](-[#1&D1&+0:30])(-[#6&D4&+0:31](-[#1&D1&+0:32])(-[#1&D1&+0:33])-[#6&D4&+0:34](-[#1&D1&+0:35])(-[#1&D1&+0:36])-[#6&D4&+0:37](-[#1&D1&+0:38])(-[#1&D1&+0:39])-[#7&D3&+0:40](-[#1&D1&+0:41])-[#6&D3&+0:42](-[#7&D3&+0:43](-[#1&D1&+0:44])-[#1&D1&+0:45])=[#7&D3&+0:46](-[#1&D1&+0:47])-[#1&D1&+0:48])-[#6&D3&+0:49](=[#8&D1&+0:50])-[*:51])-[*:52]",
#                     }
# # top = Topology.from_pdb("openff_polymer_testing/6cww_open_babel_rdkit.pdb", _custom_substructures=sixcww_substructs)
# top = Topology.from_pdb("openff_polymer_testing/6cww.pdb")
# assert successfully_loaded(top)

five_xg9_substructs = {
                        "peg": "[#6&D4&+0:13](-[#1&D1&+0:14])(-[#1&D1&+0:15])(-[#6&D4&+0:16](-[#1&D1&+0:17])(-[#1&D1&+0:18])-[#8&D2&+0:19]-[*:20])-[*:21]",
                        "peg_TERM1": "[#6&D4&+0:16](-[#1&D1&+0:17])(-[#1&D1&+0:18])(-[#6&D4&+0:19](-[#1&D1&+0:20])(-[#1&D1&+0:21])-[#8&D2&+0:22]-[#6&D4&+0:23](-[#1&D1&+0:24])(-[#1&D1&+0:25])-[#1&D1&+0:26])-[*:27]",
                        "peg_TERM2": "[#6&D4&+0:17](-[#1&D1&+0:18])(-[#1&D1&+0:19])(-[#6&D4&+0:20](-[#1&D1&+0:21])(-[#1&D1&+0:22])-[#8&D2&+0:23]-[*:24])-[#8&D2&+0:25]-[#6&D4&+0:26](-[#1&D1&+0:27])(-[#1&D1&+0:28])-[#1&D1&+0:29]",
                        "peg_TERM3": "[#6&D4&+0:16](-[#1&D1&+0:17])(-[#1&D1&+0:18])(-[#6&D4&+0:19](-[#1&D1&+0:20])(-[#1&D1&+0:21])-[#8&D2&+0:22]-[#1D1+0:23])-[*:27]",
                        "water": "[#8&D2&+0:1](-[#1&D1&+0:2])(-[#1&D1&+0:3])",
                        "waterrr": "[#8&D2&+0:1](-[#1&D1&+0:2])-[#8&D2&+0:1](-[#1&D1&+0:3])",
                        "SS1": "[#1&D1&+0:1]-[#6&D3&+0:2]1=[#6&D3&+0:3](-[#1&D1&+0:4])-[#6&D4&+0:5](-[#1&D1&+0:6])(-[#1&D1&+0:7])-[#6&D3&+0:8]2-[#7D2-1:9]-[#6&D3&+0:10](-[#1&D1&+0:11])=[#6&D3&+0:12](-[#6&D4&+0:13](-[#1&D1&+0:14])(-[#1&D1&+0:15])-[*:16])-[#6&D3&+0:17]-2=[#6&D3&+0:18]-1-[#1&D1&+0:19]",
                        "SS2": "[#1&D1&+0:1]-[#6&D3&+0:2]1=[#6&D3&+0:3](-[#1&D1&+0:4])-[#6&D3&+0:5](-[#1&D1&+0:6])=[#6&D3&+0:7]2-[#6&D3&+0:8](-[#7D2-1:9]-[#6&D4&+0:10](-[#1&D1&+0:11])(-[#1&D1&+0:12])-[#6&D3&+0:13]-2-[#6&D4&+0:14](-[#1&D1&+0:15])(-[#1&D1&+0:16])-[*:17])=[#6&D3&+0:18]-1-[#1&D1&+0:19]",
                        "SS3": "[#1&D1&+0:1]-[#6&D3&+0:2]1-[#7D2-1:3]-[#6&D3&+0:4]2-[#6&D3&+0:5](-[#1&D1&+0:6])=[#6&D3&+0:7](-[#1&D1&+0:8])-[#6&D3&+0:9](-[#1&D1&+0:10])=[#6&D3&+0:11](-[#1&D1&+0:12])-[#6&D3&+0:13]=2-[#6&D3&+0:14]=1-[#6&D4&+0:15](-[#1&D1&+0:16])(-[#1&D1&+0:17])-[*:18]"
                      }
top = Topology.from_pdb("openff_polymer_testing/5xg9_hydrogenated.pdb", _custom_substructures=five_xg9_substructs)

assert successfully_loaded(top)

#________________________________ERROR TESTING_________________________________